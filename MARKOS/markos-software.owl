<?xml version="1.0"?>


<!DOCTYPE rdf:RDF [
    <!ENTITY terms "http://purl.org/dc/terms/" >
    <!ENTITY foaf "http://xmlns.com/foaf/0.1/" >
    <!ENTITY owl "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY skos "http://www.w3.org/2004/02/skos/core#" >
    <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY mtop "http://www.markosproject.eu/ontologies/top#" >
    <!ENTITY mlic "http://www.markosproject.eu/ontologies/licenses#" >
    <!ENTITY msw "http://www.markosproject.eu/ontologies/software#" >
]>


<rdf:RDF xmlns="http://www.markosproject.eu/ontologies/software#"
     xml:base="http://www.markosproject.eu/ontologies/software"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:foaf="http://xmlns.com/foaf/0.1/"
     xmlns:terms="http://purl.org/dc/terms/"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:msw="http://www.markosproject.eu/ontologies/software#"
     xmlns:skos="http://www.w3.org/2004/02/skos/core#"
     xmlns:mtop="http://www.markosproject.eu/ontologies/top#"
     xmlns:mlic="http://www.markosproject.eu/ontologies/licenses#">
    <owl:Ontology rdf:about="http://www.markosproject.eu/ontologies/software">
        <rdfs:isDefinedBy>http://www.markosproject.eu/downloads/MARKOSOntology.doc</rdfs:isDefinedBy>
        <rdfs:comment xml:lang="en">This ontology describes the domain independent concepts used by the MARKOS service. Find more details at the MARKOS website (http://www.markosproject.eu/).</rdfs:comment>
        <owl:imports rdf:resource="&mlic;2014/07/22"/>
        <owl:versionIRI rdf:resource="&msw;2014/07/22"/>
        <owl:imports rdf:resource="&mtop;2014/07/22"/>
        <owl:imports rdf:resource="http://www.w3.org/2004/02/skos/core"/>
        <owl:imports rdf:resource="http://xmlns.com/foaf/0.1/"/>
    </owl:Ontology>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://purl.org/dc/terms/contributor -->

    <owl:AnnotationProperty rdf:about="&terms;contributor"/>
    


    <!-- http://www.markosproject.eu/ontologies/software#correspondingProperty -->

    <owl:AnnotationProperty rdf:about="&msw;correspondingProperty">
        <rdfs:label xml:lang="en">Corresponding property</rdfs:label>
        <rdfs:comment xml:lang="en">An OWL property that &quot;corresponds&quot; to the subject Property, in the sense that there is a corrispondence between the domains of the two properties and the ranges of the two properties and if two entities are related by the subject property then the corresponding entities are related by the superProperty, and viceversa.</rdfs:comment>
    </owl:AnnotationProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenanceManifestationCriteria -->

    <owl:AnnotationProperty rdf:about="&msw;provenanceManifestationCriteria">
        <rdfs:label xml:lang="en">Provenance manifestation</rdfs:label>
        <rdfs:comment xml:lang="en">Specifies which is the provenance manifestation of the instances of the subject class of SoftwareEntities and how it is (ideally) determined.

The provenance manifestation is the Artifact released by the provenance project (i.e. by the project that originally authored it).

The provenance manifestation criteria clarifies in a more precise way the semantics of the provenanceManifestation property when applied to a specific class of entities. The specified criteria is ideal in the sense that it is not requested to be applicable in a practical or efficient way in all circumstances. In other terms the information needed to determine the provenance manifestation of an entity could be difficult or complex to manage or impossible to obtain in an automatic or sure way. Depending from the specific context specific heuristics can be used to guess the provenance manifestation.

The provenance manifestation is described informally as it is not intended to be used by generic OWL resoners but by humans as guideline to implement (heuristical or correct and complete) algorithms that automatically determine the provenance of a SoftwarEntity.

An heuristical algorithm could calculate uncorrect provenance in some circumstance or could be not able to determine the provenance of all entities.</rdfs:comment>
        <rdfs:range rdf:resource="&rdf;PlainLiteral"/>
    </owl:AnnotationProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Object Properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://purl.org/dc/terms/subject -->

    <owl:ObjectProperty rdf:about="&terms;subject"/>
    


    <!-- http://www.markosproject.eu/ontologies/software#assignedValue -->

    <owl:ObjectProperty rdf:about="&msw;assignedValue">
        <rdfs:label xml:lang="en">Value</rdfs:label>
        <rdfs:comment xml:lang="en">Any value assigned, in some place of the source code, to the subject ReferenceEntity. 

Note: In general it is unspecified if and at when the corresponding source code will be exeuted and if the specified value will be actually assigned. Suproperties may be more specific on this aspect.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:domain rdf:resource="&msw;ValuedEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#associatedAnnotation -->

    <owl:ObjectProperty rdf:about="&msw;associatedAnnotation">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Associated annotation</rdfs:label>
        <rdfs:comment xml:lang="en">An annotation associated to the subject SoftwareEntity.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Annotation"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#boundEntity -->

    <owl:ObjectProperty rdf:about="&msw;boundEntity">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Bound entity</rdfs:label>
        <rdfs:comment xml:lang="en">The ParametrizedEntity that is bound by the subject ParametrizedEntityBinding. 

This corresponds ot a generalization of the UML2 association &quot;boundElement&quot;.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;ParameterizedEntity"/>
        <rdfs:domain rdf:resource="&msw;ParameterizedEntityBinding"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#boundParameter -->

    <owl:ObjectProperty rdf:about="&msw;boundParameter">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Bound parameter</rdfs:label>
        <rdfs:comment xml:lang="en">The Parameter receiving a value form the subject ParameterBinding.

This corresponds to a UML2 association &quot;formal&quot;</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Parameter"/>
        <rdfs:domain rdf:resource="&msw;ParameterBinding"/>
        <rdfs:subPropertyOf rdf:resource="&owl;topObjectProperty"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#codingLanguage -->

    <owl:ObjectProperty rdf:about="&msw;codingLanguage">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Used language</rdfs:label>
        <rdfs:comment xml:lang="en">Programming Language used to write the subject SourceCodeFile or the SourceCodeFile used to produce the subject ObjectCodeFile.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;CodeFile"/>
        <rdfs:range rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;usedEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#codingLanguageVersion -->

    <owl:ObjectProperty rdf:about="&msw;codingLanguageVersion">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Programming language version</rdfs:label>
        <rdfs:comment xml:lang="en">ProgramminLanguageVersion used to write the subject SourceCodeFile or the SourceCodeFile used to generate the subject ObjectCodeFile.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;CodeFile"/>
        <rdfs:range rdf:resource="&msw;ProgrammingLanguageVersion"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;usedEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#constrainingClassifier -->

    <owl:ObjectProperty rdf:about="&msw;constrainingClassifier">
        <rdfs:label xml:lang="en">Constraining classifier</rdfs:label>
        <rdfs:comment xml:lang="en">A Classifier that constrain the values of the subject Parameter to be this Classifier or one of its subclasses.

When applied to the Parameter of a Template, this corresponds to UML2 association &quot;constrainingClassifier&quot;.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Classifier"/>
        <rdfs:domain rdf:resource="&msw;ClassifierValuedParameter"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#declaredImplementationLanguage -->

    <owl:ObjectProperty rdf:about="&msw;declaredImplementationLanguage">
        <rdfs:label xml:lang="en">Declared implementation language</rdfs:label>
        <rdfs:comment xml:lang="en">Programming language that is declared (i.e. claimed on the web site of the project) to be used for the implementation of the released software.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#defaultValue -->

    <owl:ObjectProperty rdf:about="&msw;defaultValue">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Default value</rdfs:label>
        <rdfs:comment xml:lang="en">The value assigned to the subject ValueReference in its declaration. If the subject ValueReference is a Variable, the defaultValue is the initial Value of the Variable. 

This corresponds to a generalization of the UML2 property &quot;value&quot; of the UML2 class &quot;Slot&quot; and of the UML2 association &quot;defaultValue&quot; of the UML2 class &quot;Parameter&quot;.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:domain rdf:resource="&msw;ValuedEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;assignedValue"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#definingAttribute -->

    <owl:ObjectProperty rdf:about="&msw;definingAttribute">
        <rdfs:label xml:lang="en">Defining attribute</rdfs:label>
        <rdfs:comment xml:lang="en">The Attribute that specifies the values that may be held by the slot.

This corresponds to UML2 association definingFeature but restricted to UML2 Properties.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Attribute"/>
        <rdfs:domain rdf:resource="&msw;Slot"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#developer -->

    <owl:ObjectProperty rdf:about="&msw;developer">
        <rdfs:label xml:lang="en">Developer</rdfs:label>
        <rdfs:comment xml:lang="en">Developer of software for the project.

Equivalent to &apos;developer&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Person"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#directExtendedType -->

    <owl:ObjectProperty rdf:about="&msw;directExtendedType">
        <rdfs:label xml:lang="en">Direct extended type</rdfs:label>
        <rdfs:comment xml:lang="en">A Classifier  that is more general of the subject Classifier and used as a base for the implementation of the subjectType. 

The extension relationship may be subject to different constraints than the implementation relationship (for example, in Java, a SoftwareClass may extend only one SoftwareClass, but can implement several Interfaces).

A direct ExtendedType is a UML2 generalized Classifier (i.e. the general Classifier of a Generalization relationship)</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Classifier"/>
        <rdfs:domain rdf:resource="&msw;Classifier"/>
        <rdfs:subPropertyOf rdf:resource="&msw;directSuperType"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#directImplementedInterface -->

    <owl:ObjectProperty rdf:about="&msw;directImplementedInterface">
        <rdfs:label xml:lang="en">Direct implemented interface</rdfs:label>
        <rdfs:comment xml:lang="en">Interface implemented directly (i.e. not inherited) by the subject entity. This implies that the interface is used by the subject entity. 

A directImplementedInterface is a UML2 realizedInterface.
</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Interface"/>
        <rdfs:domain rdf:resource="&msw;SoftwareClass"/>
        <rdfs:subPropertyOf rdf:resource="&msw;directSuperType"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#directSuperType -->

    <owl:ObjectProperty rdf:about="&msw;directSuperType">
        <rdfs:label xml:lang="en">Direct supertype</rdfs:label>
        <rdfs:comment xml:lang="en">A Classifier  that is more general of the subject Classifier. Each instance of the subject Classifier is also an indirect instance of the superType. Thus, the subject Classifier inherits the features of the superType. Any constraint applying to instances of the superType also applies to instances of the subject Type.

A directSuperType is a UML2 generalized Classifier or a UML2 realized Interface.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Classifier"/>
        <rdfs:range rdf:resource="&msw;Classifier"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#direction -->

    <owl:ObjectProperty rdf:about="&msw;direction">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Direction</rdfs:label>
        <rdfs:comment xml:lang="en">Indicates whether a parameter is being sent into or out of a Behavior.

Representable by the homonymous UML2 element.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;BehaviorParameter"/>
        <rdfs:range rdf:resource="&msw;ParameterDirectionKind"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#documenter -->

    <owl:ObjectProperty rdf:about="&msw;documenter">
        <rdfs:label xml:lang="en">Documenter</rdfs:label>
        <rdfs:comment xml:lang="en">Contributor of documentation to the project.

Equivalent to &apos;documenter&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Person"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#dynamicallyLinkedEntity -->

    <owl:ObjectProperty rdf:about="&msw;dynamicallyLinkedEntity">
        <rdfs:comment xml:lang="en">A SoftwareEntity that is used by the subject SoftwareEntity and that is determined and loaded by the subject SoftwareEntity or by its containing Program at runtime during one of the possible executions. 

It is not required the DynamicallyLinkedEntity to be used at any exection, but only that it is used in some circumstance. The actual use may depend from the specific I/O of the containing Program and by the specific execution environment.

Note that the identity of a SoftwareEntity depends from the identiy of all its usedSoftwareEntities, including both the StaticallyLinkedEntities and the DynamicallyLinkedEntities. As the DynamicLinkedEntities are determined at runtime by the the specific execution environment, the same source code or object code may define different SoftwareEntities when used in different contexts and in different Programs released by different SoftwareReleases.

Most SoftwareEntities do not belong specifically to any Program (i.e. they can be reused in different Programs) and more in general can be used in different contexts, but implicit conventions and explicit human or machine readable instructions, regarding the intended use of the source code, provided by the provenanceRelease, may impose sufficient constraints on the execution conditions to determine the DynamicallyLinkedEntities independently from any specific containing Program.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#forkedSoftware -->

    <owl:ObjectProperty rdf:about="&msw;forkedSoftware">
        <rdfs:label xml:lang="en">Forked software</rdfs:label>
        <rdfs:comment xml:lang="en">The last Software, in order of derivation history (see mtop:previousVersion), released by a project disctinct from the project of the subject Software and from which the subject Software is directly or indirectly derived.

</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Software"/>
        <rdfs:domain rdf:resource="&msw;Software"/>
        <owl:inverseOf rdf:resource="&msw;softwareFork"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#helper -->

    <owl:ObjectProperty rdf:about="&msw;helper">
        <rdfs:label xml:lang="en">Helper</rdfs:label>
        <rdfs:comment xml:lang="en">Equivalent to helper from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Person"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#hostingForge -->

    <owl:ObjectProperty rdf:about="&msw;hostingForge">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Hosting forge</rdfs:label>
        <rdfs:comment xml:lang="en">Softwareforge hosting the subject SoftwareProject.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;SoftwareForge"/>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#implementationLanguage -->

    <owl:ObjectProperty rdf:about="&msw;implementationLanguage">
        <rdfs:label xml:lang="en">Implementing language</rdfs:label>
        <rdfs:comment xml:lang="en">A ProgrammingLanguage used to implement the subject SoftwareEntity. A SoftwareEntity may be implemented using more than one ProgrammingLanguage.

Rule:
implementationLanguage = implementationsLanguageVersion.unversionedAbstraction 
</rdfs:comment>
        <rdfs:range rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;usedEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#implementationLanguageVersion -->

    <owl:ObjectProperty rdf:about="&msw;implementationLanguageVersion">
        <rdfs:label xml:lang="en">Implementing language version</rdfs:label>
        <rdfs:comment xml:lang="en">A ProgrammingLanguageVersion used to implement the subject SoftwareEntity. A SoftwareEntity may be implemented using more than one ProgrammingLanguage.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;ProgrammingLanguageVersion"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;usedEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#implementedAPI -->

    <owl:ObjectProperty rdf:about="&msw;implementedAPI">
        <rdfs:label xml:lang="en">Implemented API</rdfs:label>
        <rdfs:comment xml:lang="en">API implemented by the subject Component or Library</rdfs:comment>
        <rdfs:range rdf:resource="&msw;API"/>
        <rdfs:domain rdf:resource="&msw;APIContainer"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#importedPackage -->

    <owl:ObjectProperty rdf:about="&msw;importedPackage">
        <rdfs:label xml:lang="en">Imported package</rdfs:label>
        <rdfs:comment xml:lang="en">Package that is imported by the subject SoftwareEntity, i.e. all the entities of the importedPackage are also entities of the subject Package.

It represent the same information represented by the homonymous UML2 attribute, but differently by UML2 in this ontology no class PackageImport is defined.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Package"/>
        <rdfs:domain rdf:resource="&msw;Package"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#includedAPI -->

    <owl:ObjectProperty rdf:about="&msw;includedAPI">
        <rdfs:label xml:lang="en">Included API</rdfs:label>
        <rdfs:comment xml:lang="en">API included (i.e. which elements are contained) in the subject SoftwareEntity.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;API"/>
        <rdfs:domain rdf:resource="&msw;APIContainer"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#invokedBehavior -->

    <owl:ObjectProperty rdf:about="&msw;invokedBehavior">
        <rdfs:label xml:lang="en">Invoked behavior</rdfs:label>
        <rdfs:comment xml:lang="en">Behavior that is invoked by the subject Behavior.

This is different by an invokedMethod, as in the case the executed Behavior is statically determined. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Behavior"/>
        <rdfs:range rdf:resource="&msw;Behavior"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#invokedMethod -->

    <owl:ObjectProperty rdf:about="&msw;invokedMethod">
        <rdfs:label xml:lang="en">Invoked method</rdfs:label>
        <rdfs:comment xml:lang="en">Method that is invoked by the subject Behavior.  
An invocation of a Method does not necessarily triggers the execution of the implementation provided by the owner SoftwareClass (if any) (also in the case of a concrete Method). The exact mechanism to determine the executed Behavior depends on the programming language, but in general it depends from the target object that receives the invocation (the target object is determined at runtime and not represented by this ontology).</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Behavior"/>
        <rdfs:range rdf:resource="&msw;Method"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#maintainer -->

    <owl:ObjectProperty rdf:about="&msw;maintainer">
        <rdfs:label xml:lang="en">Mantainer</rdfs:label>
        <rdfs:comment xml:lang="en">Maintainer of a project, a project leader.

Equivalent to &apos;maintainer&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Person"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#manifestation -->

    <owl:ObjectProperty rdf:about="&msw;manifestation">
        <rdfs:label xml:lang="en">Manifestation</rdfs:label>
        <rdfs:comment xml:lang="en">An object that is the concrete manifestation of the subject Software. 

sourceCode and objectCode are two examples of manifestations, but also other kind of manifestations may exist.

A Software may be an abstract entity that may have several distinct manifestations. For instance any copy of the source code of a SoftwareEntity is a manifestation of that entitiy.
</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Software"/>
        <rdfs:range rdf:resource="&msw;SoftwareArtifact"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#nestedClassifier -->

    <owl:ObjectProperty rdf:about="&msw;nestedClassifier">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Nested classifier</rdfs:label>
        <rdfs:comment xml:lang="en">Any Type that is owner by the subject Type. In UML2 it is represented by the anonymous property.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Classifier"/>
        <rdfs:domain rdf:resource="&msw;Classifier"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;ownedMember"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#objectCode -->

    <owl:ObjectProperty rdf:about="&msw;objectCode">
        <rdfs:label xml:lang="en">Object code</rdfs:label>
        <rdfs:comment xml:lang="en">An object code file, that defines the subject software entity. 
Each software entity may have several objectCode files (copies).</rdfs:comment>
        <rdfs:range rdf:resource="&msw;ObjectCodeFile"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;manifestation"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedAPI -->

    <owl:ObjectProperty rdf:about="&msw;ownedAPI">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Defined API</rdfs:label>
        <rdfs:comment xml:lang="en">API originally defined by the subject SoftwareEntity.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;API"/>
        <rdfs:domain rdf:resource="&msw;APIContainer"/>
        <rdfs:subPropertyOf rdf:resource="&msw;includedAPI"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedAttribute -->

    <owl:ObjectProperty rdf:about="&msw;ownedAttribute">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Attribute(s)</rdfs:label>
        <rdfs:comment xml:lang="en">Attribute owned by the subject Classifier, i.e. any attribute that can be represented by the UML2 role &quot;ownedAttribute&quot;. Not to be confused with a legal ownership relatioship.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Attribute"/>
        <rdfs:domain rdf:resource="&msw;Classifier"/>
        <rdfs:subPropertyOf rdf:resource="&msw;ownedVariable"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedBinding -->

    <owl:ObjectProperty rdf:about="&msw;ownedBinding">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Owned binding</rdfs:label>
        <rdfs:comment xml:lang="en">ParameterBinding used to generate the subject ParametrizedEntityBinding. </rdfs:comment>
        <rdfs:range rdf:resource="&msw;ParameterBinding"/>
        <rdfs:domain rdf:resource="&msw;ParameterizedEntityBinding"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedMethod -->

    <owl:ObjectProperty rdf:about="&msw;ownedMethod">
        <rdfs:label xml:lang="en">Method(s)</rdfs:label>
        <owl:backwardCompatibleWith xml:lang="en">Methods owned (i.e.directly declared) by the subject entity.

When the subject is a Classifier, this corresponds to the UML2 role &quot;ownedBehavior&quot;. 

Not to be confused with a legal ownership relatioship.

Here the term &quot;owned&quot; is used in a non exclusive way: a Method may be owned by only maximum one ObjectType, but may be owned by several objects.</owl:backwardCompatibleWith>
        <rdfs:domain rdf:resource="&msw;BehavioredEntity"/>
        <rdfs:range rdf:resource="&msw;Method"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedParameter -->

    <owl:ObjectProperty rdf:about="&msw;ownedParameter">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Parameter(s)</rdfs:label>
        <rdfs:comment xml:lang="en">Parameter owned by the subject ParameterizedEntity.

This generalize the UML2 associations called &quot;ownedParameter&quot;.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Parameter"/>
        <rdfs:domain rdf:resource="&msw;ParameterizedEntity"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedSlot -->

    <owl:ObjectProperty rdf:about="&msw;ownedSlot">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Slot(s)</rdfs:label>
        <rdfs:comment xml:lang="en">Any Slot owned by the subject Value. 

When the subject is an Object represented by a UML2 InstanceValue, this corresponds to the association called &quot;slot&quot; of the UML2 InstanceSpecification associated to the InstanceValue. </rdfs:comment>
        <rdfs:range rdf:resource="&msw;Slot"/>
        <rdfs:domain rdf:resource="&msw;Value"/>
        <rdfs:subPropertyOf rdf:resource="&msw;ownedVariable"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#ownedVariable -->

    <owl:ObjectProperty rdf:about="&msw;ownedVariable">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Variable(s)</rdfs:label>
        <rdfs:comment xml:lang="en">Any Variable defined within the code of the owned SoftwareEntity and accessible in the scope of that code.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:range rdf:resource="&msw;Variable"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#parameterValue -->

    <owl:ObjectProperty rdf:about="&msw;parameterValue">
        <rdfs:label xml:lang="en">Parameter value</rdfs:label>
        <rdfs:comment xml:lang="en">Value of the subject Parameter.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;ParameterBinding"/>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenance -->

    <owl:ObjectProperty rdf:about="&msw;provenance">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Provenance</rdfs:label>
        <rdfs:comment xml:lang="en">The project (if any) that originally released the subject SoftwareWork. Each SoftwareWork has maximum one provenance project.

Note that the fact that a project releases a software entity does not necessarly imply that the project is the provenance of the software entity, as the software entity could have been copied from the provenance project and released again in another project.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Software"/>
        <rdfs:range rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenanceFile -->

    <owl:ObjectProperty rdf:about="&msw;provenanceFile">
        <rdfs:domain rdf:resource="&msw;File"/>
        <rdfs:range rdf:resource="&msw;File"/>
        <rdfs:subPropertyOf rdf:resource="&msw;provenanceManifestation"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenanceManifestation -->

    <owl:ObjectProperty rdf:about="&msw;provenanceManifestation">
        <rdfs:label xml:lang="en">Provenance manifestation</rdfs:label>
        <rdfs:comment xml:lang="en">The original Artifact that defined the subject Work, i.e. the source code or the object code files released by the provenance Project of the subject SoftwareEntity. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Software"/>
        <rdfs:range rdf:resource="&msw;SoftwareArtifact"/>
        <rdfs:subPropertyOf rdf:resource="&msw;manifestation"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenanceObjectCode -->

    <owl:ObjectProperty rdf:about="&msw;provenanceObjectCode">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Provenance object code</rdfs:label>
        <rdfs:comment xml:lang="en">The original copy of the object code file, that defines the subject software entity. 
Each software entity has exactly one provenanceObjectCode. It is a file released by the provenance Project of the subject SoftwareEntity. </rdfs:comment>
        <rdfs:range rdf:resource="&msw;ObjectCodeFile"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;objectCode"/>
        <rdfs:subPropertyOf rdf:resource="&msw;provenanceManifestation"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenanceRelease -->

    <owl:ObjectProperty rdf:about="&msw;provenanceRelease">
        <rdfs:label xml:lang="en">Provenance release</rdfs:label>
        <rdfs:comment xml:lang="en">The SoftwareRelease (if any) that originally released the subject SoftwareWork. Each SoftwareWork has maximum one provenance release.

Note that the fact that a SoftwareRelease containes a software entity does not necessarly imply that the SoftwareRelease is the provenanceRelease of the software entity, as the software entity could have been copied from the provenanceRelease and released again in another release of the same project or of a different project.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Software"/>
        <rdfs:range rdf:resource="&msw;SoftwareRelease"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#provenanceSourceCode -->

    <owl:ObjectProperty rdf:about="&msw;provenanceSourceCode">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Provenance source code</rdfs:label>
        <rdfs:comment xml:lang="en">The original copy of the object source code file, that defines the subject software entity.
Each software entity has exactly one provenanceSourceCode. It is a file released by the provenance Project of the subject SoftwareEntity. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:range rdf:resource="&msw;SourceCodeFile"/>
        <rdfs:subPropertyOf rdf:resource="&msw;provenanceManifestation"/>
        <rdfs:subPropertyOf rdf:resource="&msw;sourceCode"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#providedInterface -->

    <owl:ObjectProperty rdf:about="&msw;providedInterface">
        <rdfs:label xml:lang="en">Provided interface</rdfs:label>
        <rdfs:comment xml:lang="en">Interface implemented and exposed by the subject Class or Component.

In UML2 it is represented by the attribute &quot;provided&quot;.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Component"/>
        <rdfs:range rdf:resource="&msw;Interface"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#raisedException -->

    <owl:ObjectProperty rdf:about="&msw;raisedException">
        <rdfs:label xml:lang="en">Raised exception</rdfs:label>
        <rdfs:comment xml:lang="en">The Types representing exceptions that may be raised during an invocation of the subject method. (representable by the homonymous UML2 element).</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Behavior"/>
        <rdfs:range rdf:resource="&msw;Type"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#redefinedEntity -->

    <owl:ObjectProperty rdf:about="&msw;redefinedEntity">
        <rdfs:label xml:lang="en">Redefined entity</rdfs:label>
        <rdfs:comment xml:lang="en">Any SoftwareEntity that is redefined by the subject one in the context of a generalization (e.g. superclass) relationship. It may be represented by the UML2 association redefinedElement.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#referredEntity -->

    <owl:ObjectProperty rdf:about="&msw;referredEntity">
        <rdfs:label xml:lang="en">Referred entity</rdfs:label>
        <rdfs:comment xml:lang="en">TypedEntity that is read or written by the subject SoftwareEntity </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Behavior"/>
        <rdfs:range rdf:resource="&msw;TypedEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#releasedSoftware -->

    <owl:ObjectProperty rdf:about="&msw;releasedSoftware">
        <rdf:type rdf:resource="&owl;InverseFunctionalProperty"/>
        <rdfs:label xml:lang="en">Released software</rdfs:label>
        <rdfs:comment xml:lang="en">A software (SoftwareRelease) published by a Project and considered sufficiently stable to be used by the final user. 

This relationship refers to the entire software published by a the project at certain time, i.e. a software that is contained in a released software is not a value of the releasedSoftware property.

Any releasedSoftware is (implictly) associated to a new Work released by the project, but that Work does not necessarly coincides with the entitre releasedSoftware, as the releasedSoftware could contain (for practical reasons) copies of other distinct Works or of parts of other Works (e.g. testing input data) that are used in a way that does not necessarly creates a derivative Work.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&msw;SoftwareRelease"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;subordinateEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#releasedSoftwareLicense -->

    <owl:ObjectProperty rdf:about="&msw;releasedSoftwareLicense">
        <rdfs:label xml:lang="en">Software license</rdfs:label>
        <rdfs:comment xml:lang="en">The CopyrightLicense that regulates the usage of the software released by the subject SoftwareProject.</rdfs:comment>
        <rdfs:range rdf:resource="&mlic;CopyrightLicense"/>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#releasedSoftwareLicenseTemplate -->

    <owl:ObjectProperty rdf:about="&msw;releasedSoftwareLicenseTemplate">
        <rdfs:label xml:lang="en">Type of software license</rdfs:label>
        <rdfs:comment xml:lang="en">The CopyrightLicenseTemplate that regulates the usage of the software released by the subject SoftwareProject.</rdfs:comment>
        <rdfs:range rdf:resource="&mlic;CopyrightLicenseTemplate"/>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#remotelyCalledEntity -->

    <owl:ObjectProperty rdf:about="&msw;remotelyCalledEntity">
        <rdfs:label xml:lang="en">Remotely called entity</rdfs:label>
        <rdfs:comment xml:lang="en">A SoftwareEntity that is used by the subjectSoftwareEntity and that runs in a process distinct from the one of the subject SoftwareEntity. 

Typical examples are use relationships implied by the invocation of a web service or by the invocation of an API provided by the hosting Operating System.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#repository -->

    <owl:ObjectProperty rdf:about="&msw;repository">
        <rdfs:label xml:lang="en">Repository</rdfs:label>
        <rdfs:comment xml:lang="en">The FileRepository where the subject FileSystemElement is published.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;FileRepository"/>
        <rdfs:domain rdf:resource="&msw;FileSystemElement"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#requiredInterface -->

    <owl:ObjectProperty rdf:about="&msw;requiredInterface">
        <rdfs:label xml:lang="en">Required interface</rdfs:label>
        <rdfs:comment xml:lang="en">Interface required by the subject Component.

In UML 2 it is represented by the attribute &quot;required&quot; </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Component"/>
        <rdfs:range rdf:resource="&msw;Interface"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#softwareFork -->

    <owl:ObjectProperty rdf:about="&msw;softwareFork">
        <rdfs:label xml:lang="en">Software fork</rdfs:label>
        <rdfs:comment xml:lang="en">Software directly or indirectly derived (see mtop:successiveVersion) from the subject one and released by a project that is distinct from the project of the subject Software. 
</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Software"/>
        <rdfs:domain rdf:resource="&msw;Software"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#softwareImplementationLanguage -->

    <owl:ObjectProperty rdf:about="&msw;softwareImplementationLanguage">
        <rdfs:label xml:lang="en">Software implementation language</rdfs:label>
        <rdfs:comment xml:lang="en">A ProgrammingLanguage used to implement the Software released by the subject project. It may happen it is not declared (declaredImplementingLangauge) on the project web site (e.g. in a DOAP file published on the project web site) or it may happen than a cdeclared language is not actually used.

Rule:
softwareImplementationLanguage=releasedSoftware.implementationLanguage</rdfs:comment>
        <rdfs:range rdf:resource="&msw;ProgrammingLanguageVersion"/>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#softwareRepository -->

    <owl:ObjectProperty rdf:about="&msw;softwareRepository">
        <rdfs:label xml:lang="en">Software repository</rdfs:label>
        <rdfs:comment xml:lang="en">The SoftwareRepository where the software released by the subject SoftwareProject is released.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;FileRepository"/>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#sourceCode -->

    <owl:ObjectProperty rdf:about="&msw;sourceCode">
        <rdfs:label xml:lang="en">Source code</rdfs:label>
        <rdfs:comment xml:lang="en">A source code file, that defines the subject software entity. 
Each software entity may have several sourceCode files (copies). The souceCode of a SoftwareEntity may need other files (e.g. the sourceCode of other related SoftwareEnitities) to be interpreted.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:range rdf:resource="&msw;SourceCodeFile"/>
        <rdfs:subPropertyOf rdf:resource="&msw;manifestation"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#staticallyLinkedEntity -->

    <owl:ObjectProperty rdf:about="&msw;staticallyLinkedEntity">
        <rdfs:label xml:lang="en">Statically linked entity</rdfs:label>
        <rdfs:comment xml:lang="en">A SoftwareEntity that is used by the subject SoftwareEntity and that has been included in the object code of the subject SoftwareEntity or in the executable file of the Program of the subject SoftwareEntity at compilation time (of the subject SoftwareEntity). 

A typical use of this property is to relate Programs to used Libraries that are determined at compilation/linking phase. 

Note that most SoftwareEntities do not belong specifically to any Program (i.e. they can be resued in many Programs) therefore their object code must contain any staticallyLinkedSoftwareEntity.
</rdfs:comment>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#tester -->

    <owl:ObjectProperty rdf:about="&msw;tester">
        <rdfs:label xml:lang="en">Tester</rdfs:label>
        <rdfs:comment xml:lang="en">A tester or other quality control contributor.

Equivalet to &apos;tester&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Person"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#translator -->

    <owl:ObjectProperty rdf:about="&msw;translator">
        <rdfs:label xml:lang="en">Translator</rdfs:label>
        <rdfs:comment xml:lang="en">Contributor of translations to the project.

Equivalent to &apos;translator&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Person"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#type -->

    <owl:ObjectProperty rdf:about="&msw;type">
        <rdfs:label xml:lang="en">Type</rdfs:label>
        <rdfs:comment xml:lang="en">A Type that the subject Value or the value represented by the subject TypedEntity must be instance of. This corresponds to the UML2 association &quot;classifier&quot; (in case the subject is a Value) or to the UML2 association called &quot;type&quot; (in case the subject is a placeholder for a value, such as a Variable or a formal parameter).
Depending from the programming language the type may be implicit or explicit,  statically determined or dynamically determined, unmodifiable or modifiable.</rdfs:comment>
        <rdfs:range rdf:resource="&msw;Type"/>
        <rdfs:domain rdf:resource="&msw;TypedEntity"/>
        <rdfs:subPropertyOf rdf:resource="&msw;usedSoftwareEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#usedCompiler -->

    <owl:ObjectProperty rdf:about="&msw;usedCompiler">
        <rdfs:label xml:lang="en">Used compiler</rdfs:label>
        <rdfs:comment xml:lang="en">The SoftwareEntity that is the compiler used to produce the subject object code.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;ObjectCodeFile"/>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;usedEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#usedSoftwareEntity -->

    <owl:ObjectProperty rdf:about="&msw;usedSoftwareEntity">
        <rdfs:label xml:lang="en">Used software entity</rdfs:label>
        <rdfs:comment xml:lang="en">SoftwareEntity used by the subject of this property.
A SoftwareEntity Y is used by a SoftwareEntity X if the execution or compilation process of X implies the execution, compilation or the lookup of Y (this includes the case where a copy of the source code of Y is present in a copy of the source code of X).

Note that an implementation relationship is not necessarly a use relationship as in some language an API or a Method may be implemented without (their code) beeing explicitly used by the compiler or executor. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:range rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;usedEntity"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#vendor -->

    <owl:ObjectProperty rdf:about="&msw;vendor">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Vendor</rdfs:label>
        <rdfs:comment xml:lang="en">Vendor organization: commercial, free or otherwise.

Equivalent to &apos;vendor&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&foaf;Organization"/>
    </owl:ObjectProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#visibility -->

    <owl:ObjectProperty rdf:about="&msw;visibility">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Visibility</rdfs:label>
        <rdfs:comment xml:lang="en">The UML2 visibility of the softwareEntities, i.e. a property that determines where the memebr of a Namespace appears within different Namespaces and there accessibility.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:range rdf:resource="&msw;VisibilityKind"/>
    </owl:ObjectProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Data properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.markosproject.eu/ontologies/software#anonymousAccess -->

    <owl:DatatypeProperty rdf:about="&msw;anonymousAccess">
        <rdfs:label xml:lang="en">Anonymous access</rdfs:label>
        <rdfs:comment xml:lang="en">URL for anonymous access to the repository.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;FileRepository"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#audience -->

    <owl:DatatypeProperty rdf:about="&msw;audience">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Audience</rdfs:label>
        <rdfs:comment xml:lang="en">Description of target user base.

Equivalent to &apos;audience&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#blog -->

    <owl:DatatypeProperty rdf:about="&msw;blog">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Blog</rdfs:label>
        <rdfs:comment xml:lang="en">URI of a blog related to a project.

Equivalent to &apos;blog&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#bugDatabase -->

    <owl:DatatypeProperty rdf:about="&msw;bugDatabase">
        <rdfs:label xml:lang="en">Bug database</rdfs:label>
        <rdfs:comment xml:lang="en">Bug tracker for a project.

Equivalent to &apos;bug-database&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#declarationPosition -->

    <owl:DatatypeProperty rdf:about="&msw;declarationPosition">
        <rdfs:label xml:lang="en">Declaration position</rdfs:label>
        <rdfs:comment xml:lang="en">Position number of the parameter in the declaration of the subject Behavior as found in the provenanceSourceCode.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Parameter"/>
        <rdfs:range rdf:resource="&xsd;positiveInteger"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#documentationLanguage -->

    <owl:DatatypeProperty rdf:about="&msw;documentationLanguage">
        <rdfs:label xml:lang="en">Language</rdfs:label>
        <rdfs:comment xml:lang="en">ISO language code the documentation of the project is available into.

Equivalent to &apos;language&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#downloadMirror -->

    <owl:DatatypeProperty rdf:about="&msw;downloadMirror">
        <rdfs:label xml:lang="en">Download mirror</rdfs:label>
        <rdfs:comment xml:lang="en">Download mirror

Equivalent to &apos;download-mirror&apos; from ontology DOAP</rdfs:comment>
        <rdfs:comment xml:lang="en">Mirror of software download web page.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#downloadPage -->

    <owl:DatatypeProperty rdf:about="&msw;downloadPage">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Download page</rdfs:label>
        <rdfs:comment xml:lang="en">Web page from which the project software can be downloaded.

Equivalent to &apos;download-page&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#extendedSignature -->

    <owl:DatatypeProperty rdf:about="&msw;extendedSignature">
        <rdfs:label xml:lang="en">Extended signature</rdfs:label>
        <rdfs:comment xml:lang="en">String, representing the main aspects of the ParameterizedEntity, having the following syntax:

[&lt;feature visibility&gt;] [‘static‘] [‘abstract‘] [‘final‘] &lt;feature name&gt; [&lt;parameters&gt;] [‘:’ [&lt;type&gt;] ] 

the string ‘static‘ is present if isStatic=true
the string ‘abstract‘ is present if isAbstract=true
the string ‘final‘ is present if isLeaf=true

&lt;parameters&gt; ::= ‘(‘ [&lt;parameter-list&gt;] ‘)’ 
&lt;parameter-list&gt; ::= &lt;parameter&gt; [‘,’&lt;parameter&gt;]*

&lt;parameter&gt; ::= [&lt;parameter-direction&gt;] &lt;parameter-name&gt; ‘:’ &lt;parameter-type&gt; [‘=’ &lt;default&gt;]

&lt;type&gt; corresponds to the return type of a Behavior or to the type of an Attribute.

Note that this is an extended version of what the leterature calls &quot;signature&quot; that include only the minimum set of information needed to distinguish a Bahavior from another in a determined context of use (for instance to distinguish a method from another in the same class). 

This notation is modelled onto a reduced version of the UML2 notation for Operations. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;ParameterizedEntity"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#hasSameContentOfProvenanceRelease -->

    <owl:DatatypeProperty rdf:about="&msw;hasSameContentOfProvenanceRelease">
        <rdfs:label xml:lang="en">Has same content of provenance release</rdfs:label>
        <rdfs:comment xml:lang="en">Indicates if the Library content coincides with the content of its provenance  SoftwareRelease.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Library"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isAbstract -->

    <owl:DatatypeProperty rdf:about="&msw;isAbstract">
        <rdfs:label xml:lang="en">Is abstract</rdfs:label>
        <rdfs:comment xml:lang="en">If true, the subject Classifier does not provide a complete specification of its features and can typically not be instantiated. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Classifier"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isFinalSpecialization -->

    <owl:DatatypeProperty rdf:about="&msw;isFinalSpecialization">
        <rdfs:label xml:lang="en">Is final specialization</rdfs:label>
        <rdfs:comment xml:lang="en">If true means that the subject Classifier cannot have subtypes.  

It corresponds to the homonymous UML2 attribute. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Classifier"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isLeaf -->

    <owl:DatatypeProperty rdf:about="&msw;isLeaf">
        <rdfs:label xml:lang="en">Is leaf</rdfs:label>
        <rdfs:comment xml:lang="en">If true, then it is not possible to redefine the subject Feature.

It corresponds to the homonymous UML2 attribute. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Feature"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isNamedParameter -->

    <owl:DatatypeProperty rdf:about="&msw;isNamedParameter">
        <rdfs:label xml:lang="en">Is named parameter</rdfs:label>
        <rdfs:comment xml:lang="en">Indicates if it is mandatory to specify the name of the parameter at invocation. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Parameter"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isOptionalParameter -->

    <owl:DatatypeProperty rdf:about="&msw;isOptionalParameter">
        <rdfs:label xml:lang="en">Is optional parameter</rdfs:label>
        <rdfs:comment xml:lang="en">Indicates if the subject Parameter is optional, i.e. the owning Behavior may be invoked without specifying a value for the Parameter. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Parameter"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isPositionalParameter -->

    <owl:DatatypeProperty rdf:about="&msw;isPositionalParameter">
        <rdfs:label xml:lang="en">Is positional parameter</rdfs:label>
        <rdfs:comment xml:lang="en">Indicates if the value of the subject parameter must appear in a specific (relative) position in the invocation statement of the owning Behavior. Values of positional parameters must be specified in the invocation of the Behavior in the same order (but possible different positions) of their declarationPositions. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Parameter"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isReadOnly -->

    <owl:DatatypeProperty rdf:about="&msw;isReadOnly">
        <rdfs:label xml:lang="en">Is read only</rdfs:label>
        <rdfs:comment xml:lang="en">If true, the attribute may only be read, and not written. </rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Attribute"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#isStatic -->

    <owl:DatatypeProperty rdf:about="&msw;isStatic">
        <rdfs:label xml:lang="en">Is static</rdfs:label>
        <rdfs:comment xml:lang="en">Specifies if the subject Feature characterizes individual instances of the owning classifier (false) or the classifier itself (true).</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;Feature"/>
        <rdfs:range rdf:resource="&xsd;boolean"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#mailingList -->

    <owl:DatatypeProperty rdf:about="&msw;mailingList">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Mailing list</rdfs:label>
        <rdfs:comment xml:lang="en">Mailing list home page or email address.

Equivalent to &apos;mailing-list&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#operatingSystem -->

    <owl:DatatypeProperty rdf:about="&msw;operatingSystem">
        <rdfs:label xml:lang="en">Operating system</rdfs:label>
        <rdfs:comment xml:lang="en">Operating system that the software released by a project can be executed on. Omit this property if the released software is not OS-specific.

Equivalent to &apos;os&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#path -->

    <owl:DatatypeProperty rdf:about="&msw;path">
        <rdfs:label xml:lang="en">Path</rdfs:label>
        <rdfs:comment xml:lang="en">The path of the subject FileSystemElement, used to uniquely identify and access it in the system where it is published.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;FileSystemElement"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#platform -->

    <owl:DatatypeProperty rdf:about="&msw;platform">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Platform</rdfs:label>
        <rdfs:comment xml:lang="en">Indicator of software platform (non-OS specific), e.g. Java, Firefox, ECMA CLR.

Equivalent to &apos;platform&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#serviceEndpoint -->

    <owl:DatatypeProperty rdf:about="&msw;serviceEndpoint">
        <rdf:type rdf:resource="&owl;FunctionalProperty"/>
        <rdfs:label xml:lang="en">Service endpoint</rdfs:label>
        <rdfs:comment xml:lang="en">The URI of a web service endpoint where (released) software as a service may be accessed.

Equivalent to &apos;service-endpoint&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#webInterfaceURL -->

    <owl:DatatypeProperty rdf:about="&msw;webInterfaceURL">
        <rdfs:label xml:lang="en">Web interface URL</rdfs:label>
        <rdfs:comment xml:lang="en">Web browser interface to repository.</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;FileRepository"/>
        <rdfs:subPropertyOf rdf:resource="&mtop;webSiteURL"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.markosproject.eu/ontologies/software#wiki -->

    <owl:DatatypeProperty rdf:about="&msw;wiki">
        <rdfs:label xml:lang="en">Wiki</rdfs:label>
        <rdfs:comment xml:lang="en">URL of Wiki for collaborative discussion of project.

Equivalent to &apos;wiki&apos; from ontology DOAP</rdfs:comment>
        <rdfs:domain rdf:resource="&msw;SoftwareProject"/>
        <rdfs:range rdf:resource="&xsd;anyURI"/>
    </owl:DatatypeProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Classes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.markosproject.eu/ontologies/licenses#CopyrightLicense -->

    <rdf:Description rdf:about="&mlic;CopyrightLicense">
        <rdfs:subClassOf rdf:resource="&mtop;Entity"/>
    </rdf:Description>
    


    <!-- http://www.markosproject.eu/ontologies/licenses#CopyrightLicenseTemplate -->

    <owl:Class rdf:about="&mlic;CopyrightLicenseTemplate">
        <rdfs:subClassOf rdf:resource="&mtop;NamedEntity"/>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/licenses#Work -->

    <rdf:Description rdf:about="&mlic;Work">
        <rdfs:subClassOf rdf:resource="&mtop;NamedEntity"/>
    </rdf:Description>
    


    <!-- http://www.markosproject.eu/ontologies/software#API -->

    <owl:Class rdf:about="&msw;API">
        <rdfs:label xml:lang="en">API</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;containerEntity"/>
                <owl:allValuesFrom>
                    <owl:Class>
                        <owl:unionOf rdf:parseType="Collection">
                            <rdf:Description rdf:about="&msw;Library"/>
                            <rdf:Description rdf:about="&msw;Package"/>
                        </owl:unionOf>
                    </owl:Class>
                </owl:allValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;containedEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;Interface"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <mtop:identityCriteria xml:lang="en">(The set of identities of) all software entities (i.e. Interfaces) in the API.</mtop:identityCriteria>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;API&apos; + the location of the provenance manifestation + the version of the API.</mtop:canonicalURICriteria>
        <rdfs:comment xml:lang="en">Set of all public interfaces of a Package or a Library.

If two Packages or two Libraries contains the same public interfaces then they contains the same API.

An implementation of an API is any software entity X (e.g. Package or Library) containing, at least, a software entity implementing an interface contained in the API. The percentage of API implemented by X is the percentage of the API interfaces that are implemented by some software entity contained in X.</rdfs:comment>
        <provenanceManifestationCriteria xml:lang="en">The manifestation of the Package or Library that originally defined (i.e. owns) the API.</provenanceManifestationCriteria>
        <mtop:nameCriteria xml:lang="en">The name of the Package or Library that originally defined (i.e. owns) the API.</mtop:nameCriteria>
        <mtop:namespaceCriteria xml:lang="en">The namespace (if any) of the Package or Library that originally defined (i.e. owns) the API.</mtop:namespaceCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#APIContainer -->

    <owl:Class rdf:about="&msw;APIContainer">
        <rdfs:label xml:lang="en">API container</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:subClassOf rdf:resource="&mtop;Container"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;containedEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;SoftwareEntity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A SoftwareEntity that could (potentially) contain an API or an API implementation.</rdfs:comment>
        <mtop:nameCriteria xml:lang="en">Any SoftwareEntity that may contain an API.</mtop:nameCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Annotation -->

    <owl:Class rdf:about="&msw;Annotation">
        <rdfs:label xml:lang="en">Annotation</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Value"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;type"/>
                <owl:allValuesFrom rdf:resource="&msw;AnnotationType"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A Value associated to a SoftwareEntity that (differently from values of ownedParameter and ownedVariable) does not impact the semantics of the SoftwareEntity (but can be exploited at runtime by other software entities, possibly indirectly affecting the semantics of the containing program). Depending from the programming language, an Annotation may be an Object or a DataValue.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#AnnotationType -->

    <owl:Class rdf:about="&msw;AnnotationType">
        <rdfs:label xml:lang="en">Annotation type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ValueType"/>
        <rdfs:comment xml:lang="en">An annotation type is a type which istances are Annotations. Depending from the programming language an AnnotationType may be an ObjectType or a DataType.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ArchRepository -->

    <owl:Class rdf:about="&msw;ArchRepository">
        <rdfs:label xml:lang="en">Arch repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">GNU Arch file repository.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ArchiveFile -->

    <owl:Class rdf:about="&msw;ArchiveFile">
        <rdfs:label xml:lang="en">Archive file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;File"/>
        <rdfs:subClassOf rdf:resource="&msw;FileCollection"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;containedEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;File"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/w/index.php?title=Archive_file&amp;oldid=540460887</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A file that is composed of one or more files along with metadata. </rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Attribute -->

    <owl:Class rdf:about="&msw;Attribute">
        <rdfs:label xml:lang="en">Attribute</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Feature"/>
        <rdfs:subClassOf rdf:resource="&msw;Variable"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;redefinedEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;Attribute"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Member_variable</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A variable owned by a Classifier (a static attribute, also called class variable) or by a certain kind of Objects (a non static attribute, also called instance variable). It can be represented by a UML2 Property. Often it is called also &quot;member variable&quot;.

Note that in UML terminology an attribute is a Property owned by a Classifier, while here Attribute is used to represent also a UML2 Property not owned by any Classifier. 

In most languages a static Attribute coincides with the described Slot.</rdfs:comment>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;Attribute&apos; + owning class URI  + attribute name</mtop:canonicalURICriteria>
        <mtop:versionCriteria xml:lang="en">N.A.</mtop:versionCriteria>
        <mtop:identityCriteria xml:lang="en">Owning class,
attribute name.
</mtop:identityCriteria>
        <mtop:nameCriteria xml:lang="en">The name of the Attribute as defined by the source code. </mtop:nameCriteria>
        <mtop:namespaceCriteria xml:lang="en">The owner Classifier (a Classifier is also a Namespace).</mtop:namespaceCriteria>
        <provenanceManifestationCriteria xml:lang="en">The same of its owning class. </provenanceManifestationCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#BKRepository -->

    <owl:Class rdf:about="&msw;BKRepository">
        <rdfs:label xml:lang="en">BK repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">BitKeeper file repository</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#BazaarBranch -->

    <owl:Class rdf:about="&msw;BazaarBranch">
        <rdfs:label xml:lang="en">Bazaar branch</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">Bazaar source code branch.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Behavior -->

    <owl:Class rdf:about="&msw;Behavior">
        <rdfs:label xml:lang="en">Behavior</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Classifier"/>
        <rdfs:subClassOf rdf:resource="&msw;ParameterizedEntity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;ownedParameter"/>
                <owl:allValuesFrom rdf:resource="&msw;BehaviorParameter"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/w/index.php?title=Subroutine&amp;oldid=602726046</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A Software Entity that represents a sequence of program instructions that perform a specific task, packaged as a unit. Depending from the characteristics, the programming language and from the particular termnology a Behavior may be called  subroutine, procedure, function, routine, method, subprogram.

This corresponds to UML2 class &quot;Behavior&quot;. Note that dispite the UML2 definition (&quot;Behavior is a specification of how its context classifier changes state over time. [...]&quot;) a UML2 Behavior does not necessarly have an associated Classifier.

This is an abstract OWL class, i.e. identity criteria are defined by OWL subclasses.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#BehaviorParameter -->

    <owl:Class rdf:about="&msw;BehaviorParameter">
        <rdfs:label xml:lang="en">Behavior parameter</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Parameter"/>
        <rdfs:subClassOf rdf:resource="&msw;Variable"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;type"/>
                <owl:allValuesFrom rdf:resource="&msw;ValueType"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">Parameter owened by a Behavior. 

This corresponds to the UML2 class &quot;Parameter&quot;.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#BehavioredEntity -->

    <owl:Class rdf:about="&msw;BehavioredEntity">
        <rdfs:label xml:lang="en">BehavioredEntity</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">Any SoftwareEntity that may own or define Methods.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#CVSRepository -->

    <owl:Class rdf:about="&msw;CVSRepository">
        <rdfs:label xml:lang="en">CVS repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">CVS file repository.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Classifier -->

    <owl:Class rdf:about="&msw;Classifier">
        <rdfs:label xml:lang="en">Classifier</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Type"/>
        <rdfs:subClassOf rdf:resource="&mtop;Namespace"/>
        <rdfs:comment xml:lang="en">A Type that is also a namespace. 
It can be represented by a UML2 Classifier: &quot;A classifier is a namespace whose members can include features. [...] A classifier is a type and can own generalizations, thereby making it possible to define generalization relationships to other classifiers. A classifier can specify a generalization hierarchy by referencing its general classifiers. A classifier is a redefinable element, meaning that it is possible to redefine nested [i.e. member] classifiers.&quot;</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ClassifierValuedParameter -->

    <owl:Class rdf:about="&msw;ClassifierValuedParameter">
        <rdfs:label xml:lang="en">Classifier valued parameter</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Parameter"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;assignedValue"/>
                <owl:allValuesFrom rdf:resource="&msw;Classifier"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A Parameter which values can be only Classifiers.

This is a generalization of the UML2 class &quot;ClassifierTemplateParameter&quot;.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#CodeFile -->

    <owl:Class rdf:about="&msw;CodeFile">
        <rdfs:label xml:lang="en">Code file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;File"/>
        <rdfs:comment xml:lang="en">Any File that is part of a software Program. It is a SourceCodeFile or an ObjectCodeFile.</rdfs:comment>
        <owl:disjointUnionOf rdf:parseType="Collection">
            <rdf:Description rdf:about="&msw;ObjectCodeFile"/>
            <rdf:Description rdf:about="&msw;SourceCodeFile"/>
        </owl:disjointUnionOf>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Component -->

    <owl:Class rdf:about="&msw;Component">
        <rdfs:label xml:lang="en">Component</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Classifier"/>
        <rdfs:comment xml:lang="en">A software entity that can be represented by a UML2 Component: &quot;a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment. A component defines its behaviour in terms of provided and required interfaces. As such, a component serves as a type whose conformance is defined by these provided and required interfaces [...]. One component may therefore be substituted by another only if the two are type conformant. A component may be manifest by one or more artefacts [...]&quot;. 

While in UML each Component is also a (Software)Class, here we do not assume that a software component is also a software class, but we assume as in UML 2, that it has an internal structure (i.e. &quot;acts as the namespace for various kinds of classifiers defined within its scope, including classes.&quot;).</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ConfigurationFile -->

    <owl:Class rdf:about="&msw;ConfigurationFile">
        <rdfs:label xml:lang="en">Configuration file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SourceCodeFile"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/w/index.php?title=Configuration_file&amp;oldid=540356373</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A file used to configure the initial settings for some computer programs.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Constructor -->

    <owl:Class rdf:about="&msw;Constructor">
        <rdfs:label xml:lang="en">Constructor</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Behavior"/>
        <rdfs:comment xml:lang="en">A Behavior, that may be used to create and set the status of a new Object. Depending from the programming language, a constructor may be used only to set the status of a new Object or also to change the status of an already created Object.   </rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#DarcsRepository -->

    <owl:Class rdf:about="&msw;DarcsRepository">
        <rdfs:label xml:lang="en">Darcs repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">darcs source code repository.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#DataType -->

    <owl:Class rdf:about="&msw;DataType">
        <rdfs:label xml:lang="en">Data type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ValueType"/>
        <rdfs:comment xml:lang="en">A software entity  that can be represented by a UML2 DataType: &quot;A data type is a special kind of classifier, similar to a class. It differs from a class in that instances of a data type are identified only by their value.

All copies of an instance of a data type and any instances of that data type with the same value are considered to be equal instances. Instances of a data type that have attributes (i.e., is a structured data type) are considered to be equal if the structure is the same and the values of the corresponding attributes are equal. If a data type has attributes, then instances of that data type will contain attribute values matching the attributes.&quot;
</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#DataValue -->

    <owl:Class rdf:about="&msw;DataValue">
        <rdfs:label xml:lang="en">DataValue</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Value"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;type"/>
                <owl:allValuesFrom rdf:resource="&msw;DataType"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A Value having no identity, i.e. if two values have the same representation, then they are indistinguishable. Depending from the programming language DataValue may have or not Attribute values (i.e. Slots), Methods and nested Types.
In particular any SoftwareEntity that may be represented by a UML2 LiteralValue is a DataValue, but not any DataValue (in particular a structured DataValue) may be represented by a UML2 LiteralValue.    </rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Directory -->

    <owl:Class rdf:about="&msw;Directory">
        <rdfs:label xml:lang="en">Directory</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileCollection"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Directory_%28file_systems%29</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A file system element that groups other elements of the file system.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Enumeration -->

    <owl:Class rdf:about="&msw;Enumeration">
        <rdfs:label xml:lang="en">Enumeration</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;DataType"/>
        <rdfs:comment xml:lang="en">A software entity that can be represented by a UML2 Enumeration: &quot;An enumeration is a data type whose values are enumerated in the model as enumeration literals&quot;.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ExceptionType -->

    <owl:Class rdf:about="&msw;ExceptionType">
        <rdfs:label xml:lang="en">Exception type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Classifier"/>
        <rdfs:comment xml:lang="en">A type which instances represents exception that may be raised during an invocation of a method (i.e. it can be represented by the type of a &quot;raised exception&quot; in UML2).</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ExecutableFile -->

    <owl:Class rdf:about="&msw;ExecutableFile">
        <rdfs:label xml:lang="en">Executable file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ObjectCodeFile"/>
        <rdfs:comment xml:lang="en">Any File containing machine code instructions in a format suitable to be loaded and executed by a computer operating system on a specific hardware.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Feature -->

    <owl:Class rdf:about="&msw;Feature">
        <rdfs:label xml:lang="en">Feature</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">An SoftwareEntity that may be represented by a UML2 Feature: &quot;A feature represents some characteristic for its featuring classifiers; this characteristic may be of the classifier&apos;s instances considered individually (not static), or of the classifier itself (static). A Feature can be a feature of multiple classifiers. 
The same feature cannot be static in one context but not another.&quot; 

A Feature is ownedMeber of a Classifier.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#File -->

    <owl:Class rdf:about="&msw;File">
        <rdfs:label xml:lang="en">File</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileSystemElement"/>
        <rdfs:subClassOf rdf:resource="&mtop;VersionedEntity"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/w/index.php?title=Computer_file&amp;oldid=531726094</rdfs:seeAlso>
        <mtop:identityCriteria xml:lang="en">- the location of the File,
- the File version.</mtop:identityCriteria>
        <rdfs:comment xml:lang="en">Any entity that can be represented by an instance of a UML2 Artifact with standard stereotype &lt;&lt;File&gt;&gt; (i.e. A physical file in the context of the system developed.). 

Note that in UML2 the steoroptype &lt;File&gt; qualifies a Classifier, while here File qualifies an individual.

Also wikipedia definition applies: &quot;A block of arbitrary information, or resource for storing information, which is available to a computer program and is usually based on some kind of durable storage.&quot; 
(Computer file. (2013, January 7). In Wikipedia, The Free Encyclopedia. Retrieved 12:32, January 23, 2013)

The location (e.g. its URL) of a File is identitified by the location of its direct Container (FileContainer, if any, or FileRepository) togheter with the File name. A File has a unique location.</rdfs:comment>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;File&apos; + the location of the File + the version of the File</mtop:canonicalURICriteria>
        <mtop:nameCriteria xml:lang="en">The (local) name used by the users of the FileRepository to identify and distinguish the subject File from other Files within the same FileContainer. 

Usually it does not include the name or the location of the Container (i.e. it is only the last portion of what , in most File Systems, is called the path of the file).</mtop:nameCriteria>
        <provenanceManifestationCriteria xml:lang="en">The SoftwareProject that owns the FileRepository containing the file.</provenanceManifestationCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#FileCollection -->

    <owl:Class rdf:about="&msw;FileCollection">
        <rdfs:label xml:lang="en">File collection</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileSystemElement"/>
        <rdfs:subClassOf rdf:resource="&mtop;Container"/>
        <rdfs:subClassOf rdf:resource="&mtop;Namespace"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;containedEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;FileSystemElement"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A FileSystemElement that is a container for files or for other container of files.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#FileRepository -->

    <owl:Class rdf:about="&msw;FileRepository">
        <rdfs:label xml:lang="en">File repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;Container"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/w/index.php?title=Repository_(version_control)&amp;oldid=544154477</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A data structure in a revision control system, usually stored on a server, that contains:
    A set of files and directories.
    Historical record of changes in the repository.
    A set of commit objects.
    A set of references to commit objects, called heads.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#FileSet -->

    <owl:Class rdf:about="&msw;FileSet">
        <rdfs:label xml:lang="en">File set</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileCollection"/>
        <rdfs:comment xml:lang="en">A set of FileSystemElements. Such a set is not a data structure managed by the FileSystem (such as a Directory) but an abstraction used to manage more than one element as a single entity.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#FileSystemElement -->

    <owl:Class rdf:about="&msw;FileSystemElement">
        <rdfs:label xml:lang="en">File system element</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareArtifact"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/File_system</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A data structure (a file or a directory) managed by a file system or a set (FileSet) of such data structures.

A FileSystemElement may belong to (only one) another FileSystemElement (FileContainer). The container of a FileSystemElement is its namespace.  The name of a File is unique in its FileContainer.

The location (e.g. the URL) of a File is determined by the location of its FileContainer followed its the name.

</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#GitBranch -->

    <owl:Class rdf:about="&msw;GitBranch">
        <rdfs:label xml:lang="en">GIT branch</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">Git file branch.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#HgRepository -->

    <owl:Class rdf:about="&msw;HgRepository">
        <rdfs:label xml:lang="en">Mercurial repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">Mercurial source code repository.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Interface -->

    <owl:Class rdf:about="&msw;Interface">
        <rdfs:label xml:lang="en">Interface</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ObjectType"/>
        <rdfs:comment xml:lang="en">A software entity that that can be represented by a UML2 Interface: &quot;An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. [...] An interface does not specify how it is to be implemented, but merely what needs to be supported by realizing instances. That is, such instances must provide a public facade (attributes, operations [methods], externally observable behavior) that conforms to the interface. The set of interfaces realized by a classifier [e.g. a class] are its provided interfaces, which represent the obligations that instances of that classifier have to their clients. Interfaces may also be used to specify required interfaces [...]. Required interfaces specify services that a classifier needs in order to perform its function and fulfill its own obligations to its clients.&quot;</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Library -->

    <owl:Class rdf:about="&msw;Library">
        <rdfs:label xml:lang="en">Library</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;APIContainer"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;manifestation"/>
                <owl:someValuesFrom rdf:resource="&msw;ArchiveFile"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A library is a software entity, manifested by an ArchiveFile, that aggregates the software entities manifested by the files contained in the ArchiveFile.</rdfs:comment>
        <mtop:namespaceCriteria xml:lang="en">Libraries have no namespace.</mtop:namespaceCriteria>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;Library&apos; + the location of the provenance manifestation + the version of the Library.</mtop:canonicalURICriteria>
        <mtop:identityCriteria xml:lang="en">The location of the provenance manifestation.</mtop:identityCriteria>
        <mtop:nameCriteria xml:lang="en">The name of the provenance manifestation.</mtop:nameCriteria>
        <provenanceManifestationCriteria xml:lang="en">The original manifestation (ArchiveFile) of the library, i.e. the copy created for first the time from some Project or people.</provenanceManifestationCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#MakeFile -->

    <owl:Class rdf:about="&msw;MakeFile">
        <rdfs:label xml:lang="en">Make file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ScriptFile"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/w/index.php?title=Make_(software)&amp;oldid=540023379</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">A file, used by a Make utility, that specifies how to automatically build executable programs and libraries from source code.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Method -->

    <owl:Class rdf:about="&msw;Method">
        <rdfs:label xml:lang="en">Method</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Behavior"/>
        <rdfs:subClassOf rdf:resource="&msw;Feature"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty>
                    <rdf:Description>
                        <owl:inverseOf rdf:resource="&msw;ownedMethod"/>
                    </rdf:Description>
                </owl:onProperty>
                <owl:onClass rdf:resource="&msw;ObjectType"/>
                <owl:maxQualifiedCardinality rdf:datatype="&xsd;nonNegativeInteger">1</owl:maxQualifiedCardinality>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A Behavior, plus the specification of how to invoke it, that is associated or may be associated to Objects or to SoftwareClasses and which has access to Object or SoftwareClass (private) Slots. A Behavior associated to a specific Object or type of Object is also called an instance Method, while a Behavior associated to a specific SoftwareClass is also called class Method or static Method. 
A Method may be abstract or concrete. A Method may be constituted just by a declaration that specify how to invoke a corresponding Behavior, in that case it is an abstract Method. If the Method includes the full Behavior it is a concrete method. 
A concrete Method is an implemented Operation, while an Abstract Method is just an Operation. A Method may implement more than one Operation; in particular if a Method is redefined by another Method (see property redefinedEntity) it implements also the Operation implmented by the first Method. 
A Method in this ontology corresponds to both a UML2 Operation and an UML2 Method.
Depending from the programming language, the (type of) Object or SoftwareClass that the Method is, or may be, associated to is dynamically or statically determined. Similarly, depending from the programming language a Method must be defined within an ObjectType or must be defined within a SoftwareClass or must be defined within an Object or may be defined independently from the Objects or SoftwareClasses it may act on.

</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Object -->

    <owl:Class rdf:about="&msw;Object">
        <rdfs:label xml:lang="en">Object</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;BehavioredEntity"/>
        <rdfs:subClassOf rdf:resource="&msw;Value"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;type"/>
                <owl:allValuesFrom rdf:resource="&msw;ObjectType"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A Value which representation is distinguished from its identity. An Object may own Attributes values (i.e. Slots) and/or Methods and/or nested Types, but its identity does not coincide with its Attributes values (i.e. also if two objects are equal, having the same Attributes values, they may be distinguished).

This ontology does not allow to represent the status evolution of an Object, but only its initialization status (see also property value).

An Object that is instance of a Classifier may be represented by a UML2 InstanceSpecification (and the types of the Object are specififed by the values of the UML2 property &quot;classifier&quot;).
</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ObjectCodeFile -->

    <owl:Class rdf:about="&msw;ObjectCodeFile">
        <rdfs:label xml:lang="en">Object code</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;CodeFile"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://www.gnu.org/licenses/gpl.html</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">Any manifestation of a software Program that is not a SourceCodeFile (it is also an Object Code in the same sense of GPL v.3)</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ObjectFile -->

    <owl:Class rdf:about="&msw;ObjectFile">
        <rdfs:label xml:lang="en">Object file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ObjectCodeFile"/>
        <rdfs:comment xml:lang="en">Any ObjectCodeFile that is the output of a compiler and is not an ExecutableFile.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ObjectType -->

    <owl:Class rdf:about="&msw;ObjectType">
        <rdfs:label xml:lang="en">Software object type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;BehavioredEntity"/>
        <rdfs:subClassOf rdf:resource="&msw;ValueType"/>
        <rdfs:comment xml:lang="en">Any Type which instances are objects i.e. Values that may have attributes values, methods and nested types but which identity does not coincides with their status (i.e. two distinct objects may have same attributes values).</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Package -->

    <owl:Class rdf:about="&msw;Package">
        <rdfs:label xml:lang="en">Package</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;APIContainer"/>
        <rdfs:subClassOf rdf:resource="&mtop;Namespace"/>
        <rdfs:comment xml:lang="en">A Namespace such that all its SoftwareEntities belong to (at least) one same SoftwareRelease. A package is identitified just by its members and the containing SoftwareRelease is not part of the identity of the Package, therefore the same Package may be contained in two different SoftwareReleases.

Packages are used to disambiguate names within the context of a same SoftwareRelease. 

Regardless of its name, a Package may have other Packages as ownedMember or not, depending from the programming language.

A Package can be represented by a UML2 package (&quot;A package is a namespace for its members, and may contain other packages&quot;), but UML does not require that the members of the package belong to a same SoftwareRelease.

It is possible to have different packages with the same fullname. If a SoftwareRelease contains a SoftwareEntity of Package P that is not contained in another SoftwareRelease, the two releases contain different packages, also if the rest of the SoftwareEntities of P are contained in both the SoftwareReleases. In this case the Packages have the same fullname but one Package is a (direct or indirect) previousVersion of the other.

</rdfs:comment>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;Package&apos; + provenance project URI  + release name + package namespace + package name.</mtop:canonicalURICriteria>
        <mtop:nameCriteria xml:lang="en">The name of the package is the name of the namespace of the contained entities.</mtop:nameCriteria>
        <mtop:namespaceCriteria xml:lang="en">The namespace of the package is the namespace of the namespace of the contained entities.</mtop:namespaceCriteria>
        <mtop:identityCriteria xml:lang="en">The set of identities of all software entities in the package.</mtop:identityCriteria>
        <mtop:versionCriteria xml:lang="en">The version of the set of manifestation souce code files of the project members (it depends forn the Version Control System if the set have a unique version or each file have an independent version). </mtop:versionCriteria>
        <provenanceManifestationCriteria xml:lang="en">the first project (in temporal order) that released the package (i.e that released exactly the souce code manifestations of the set of members of the package, not more and not less).</provenanceManifestationCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Parameter -->

    <owl:Class rdf:about="&msw;Parameter">
        <rdfs:label xml:lang="en">Parameter</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ValuedEntity"/>
        <rdfs:comment xml:lang="en">A parameter of a ParametrizedEntity.

This generalize the UML2 classes Parameter (specification of an argument used to pass information into or out of a Method invocation) and TemplateParameter (formal parameter of a template).</rdfs:comment>
        <rdfs:comment xml:lang="en">MARKOS prefix + &apos;Parameter&apos; + owning Method URI  + Parameter name</rdfs:comment>
        <mtop:versionCriteria xml:lang="en">N.A.</mtop:versionCriteria>
        <mtop:namespaceCriteria xml:lang="en">N.A.</mtop:namespaceCriteria>
        <mtop:identityCriteria xml:lang="en">Owning Method,
attribute name.
</mtop:identityCriteria>
        <mtop:nameCriteria xml:lang="en">The name of the Parameter as defined by the source code. </mtop:nameCriteria>
        <provenanceManifestationCriteria xml:lang="en">The same of its owning Method. </provenanceManifestationCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ParameterBinding -->

    <owl:Class rdf:about="&msw;ParameterBinding">
        <rdfs:label xml:lang="en">Parameter binding</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;Entity"/>
        <rdfs:comment xml:lang="en">Assignment of a value to a parameter.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ParameterDirectionKind -->

    <owl:Class rdf:about="&msw;ParameterDirectionKind">
        <rdfs:label xml:lang="en">Parameter direction kind</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;Entity"/>
        <rdfs:comment xml:lang="en">An enumeration of the following literal values:
- &quot;in&quot; Indicates that parameter values are passed into the Method by the caller. 
- &quot;inout&quot; Indicates that parameter values are passed into a Method by the caller and then back out to the caller from the behavioral element.
- &quot;out&quot; Indicates that parameter values are passed from a behavioral element out to the caller. 
- &quot;return&quot; Indicates that parameter values are passed as return values from a behavioral element back to the caller. 

Representable by the homonymous UML2 type.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ParameterizedEntity -->

    <owl:Class rdf:about="&msw;ParameterizedEntity">
        <rdfs:label xml:lang="en">Parameterized entity</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">Any SoftwareEntity that can be used to generate other SoftwareEntities or program statements by assigning a value to its Parameters.

ParameterizedEntity is an acbstract OWL class. Any ParametrizedEntity correspond to a function (in a mathematical sense) that associates a SoftwareEntity to other SoftwareEntities. It generalizes the concept of Behavior, allowing to return SoftwarEntities, that are not necessarily Values, are not necessarily new and are not necessarily the result of the execution of a sequence of program instructions. 

</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ParameterizedEntityBinding -->

    <owl:Class rdf:about="&msw;ParameterizedEntityBinding">
        <rdfs:label xml:lang="en">Parameterized entity binding</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">A SoftwareEntity obtained by binding the parameters of a ParameterizedEntity</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#PrimitiveType -->

    <owl:Class rdf:about="&msw;PrimitiveType">
        <rdfs:label xml:lang="en">Primitive type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;DataType"/>
        <rdfs:comment xml:lang="en">A software entity that can be represented by a UML2 PrimitiveType: &quot;A primitive type defines a predefined data type, without any relevant substructure [...]&quot;</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#PrimitiveValue -->

    <owl:Class rdf:about="&msw;PrimitiveValue">
        <rdfs:label xml:lang="en">Primitive value</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;DataValue"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;type"/>
                <owl:allValuesFrom rdf:resource="&msw;PrimitiveType"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;name"/>
                <owl:minCardinality rdf:datatype="&xsd;nonNegativeInteger">1</owl:minCardinality>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A predefined DataValue.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Program -->

    <owl:Class rdf:about="&msw;Program">
        <rdfs:label xml:lang="en">Program</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">A sequence of instructions that can be executed by a computer. A program manifestation is often a single executable file, that the computer can use directly to execute the instructions.
A Program may contain other software entities.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ProgrammingLanguage -->

    <owl:Class rdf:about="&msw;ProgrammingLanguage">
        <rdfs:label xml:lang="en">Programming language</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;NamedEntity"/>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ProgrammingLanguageVersion -->

    <owl:Class rdf:about="&msw;ProgrammingLanguageVersion">
        <rdfs:label xml:lang="en">Programming language version</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;NamedEntity"/>
        <rdfs:subClassOf rdf:resource="&mtop;VersionedEntity"/>
        <rdfs:comment xml:lang="en">As defined from Wikipedia: a programming language is an artificial language designed to communicate instructions to a machine, particularly a computer. Programming languages can be used to create programs that control the behaviour of a machine and/or to express algorithms precisely.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SVNRepository -->

    <owl:Class rdf:about="&msw;SVNRepository">
        <rdfs:label xml:lang="en">SVN repository</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;FileRepository"/>
        <rdfs:comment xml:lang="en">Subversion file repository.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ScriptFile -->

    <owl:Class rdf:about="&msw;ScriptFile">
        <rdfs:label xml:lang="en">Script file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SourceCodeFile"/>
        <rdfs:comment xml:lang="en">Any file written in a Sripting language, i.e. an interpreted language expecially useful to automate the execution of tasks that could alternatively be executed one-by-one by a human operator.

It may be represented by a UML2 Artifact with standard stereotype &lt;&lt;Script&gt;&gt;.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Slot -->

    <owl:Class rdf:about="&msw;Slot">
        <rdfs:label xml:lang="en">Slot</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Variable"/>
        <rdfs:comment xml:lang="en">Named storage location owned by an Object. Its name is used to refer to the corresponding stored value or values.

A Slot may be specified by an Attribute. The name of a Slot coincides with the name of the related Attribute.

Depending from the programming language the related Attribute may have an explicit representantion as a distinct SoftwareEntity or may remain implicit (for example may be impicitly represented by a prototype Slot).

Depending from the programming language a Slot may be an Object or not and may exist or not without an owning Object. A Slot cannot be owned by more than one SoftwareEntity.

A slot owned by an Object and having an explicit related Atribute may be represented by a UML2 Slot.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Software -->

    <owl:Class rdf:about="&msw;Software">
        <rdfs:label xml:lang="en">Software</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;Entity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;containedEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;Software"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;previousVersion"/>
                <owl:allValuesFrom rdf:resource="&msw;Software"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">Any Software. This category include both the concrete manifestations, such as files having a specific location on a specific machines, and 
abstract entities, such as a Program that may have different concrete manifestations (i.e. copies) installed on different machines.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SoftwareArtifact -->

    <owl:Class rdf:about="&msw;SoftwareArtifact">
        <rdfs:label xml:lang="en">Software artifact</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Software"/>
        <rdfs:subClassOf rdf:resource="&mtop;Artifact"/>
        <rdfs:comment xml:lang="en">Any Software that is also an Artifact, i.e. that have a specific location in (physical or Internet) space and in time.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SoftwareClass -->

    <owl:Class rdf:about="&msw;SoftwareClass">
        <rdfs:label xml:lang="en">Class</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ObjectType"/>
        <mtop:versionCriteria xml:lang="en"> the version of the provenanceSourceCode.</mtop:versionCriteria>
        <rdfs:comment xml:lang="en">A software entity that can be represented by a UML2 Class: &quot;A class describes a set of objects that share the same specifications of features, constraints, and semantics. Class is a kind of classifier whose features are attributes and operations [methods].&quot;</rdfs:comment>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;Class&apos; + name + namespace + incremental number (needed to distinguish classes with the same name and namespace)</mtop:canonicalURICriteria>
        <provenanceManifestationCriteria xml:lang="en">The SourceCode manifestation released by the original author of the &quot;full source code&quot; of the SoftwareClass.

The &quot;full source code&quot; of a software entity is the minimal self-contained set of files (or file portions) that are needed to interpret or compile a software entity manifestation. Self-contained means that no other file is needed to interpret or compile the code without errors. Minimal means that there is no subset of it defining the same software entity. In general the source code may need more than one file. 

The &quot;full source code&quot; of a software entity may be defined also as the set of manifestations of the software entity and of the software entity it depends on.

For instance the full source code of a Java class named Person is not just the Java file Person.java (the manifestation) but it is composed also by any other files needed to compile the Person.java file (e.g. if Person inherits from the class Animal also the source code of Animal is needed).
</provenanceManifestationCriteria>
        <mtop:identityCriteria xml:lang="en">the location of the provenance manifestation,
the version,
the name,
the namespace.</mtop:identityCriteria>
        <mtop:nameCriteria xml:lang="en">the name of the SoftwareClass defined by its source code according to the programming language specification. </mtop:nameCriteria>
        <mtop:namespaceCriteria xml:lang="en">the namespace of the SoftwareClass defined by its source code according to the programming language specification.</mtop:namespaceCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SoftwareEntity -->

    <owl:Class rdf:about="&msw;SoftwareEntity">
        <rdfs:label xml:lang="en">Software entity</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Software"/>
        <rdfs:subClassOf rdf:resource="&mtop;VersionedEntity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;manifestation"/>
                <owl:allValuesFrom rdf:resource="&msw;File"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <mtop:namespaceCriteria xml:lang="en"> the version of the provenanceSourceCode.</mtop:namespaceCriteria>
        <provenanceManifestationCriteria xml:lang="en">(Deafult) The SourceCode manifestation released by the original author of the &quot;full source code&quot; of the SoftwareEntity. 

(This is a defaullt criteria, i.e. it apply to any OWL subclass of SoftwareEntity, at least that a specific criteria is defined for that Class).

The &quot;full source code&quot; of a SoftwareEntity is the minimal self-contained set of files (or file portions) that are needed to interpret or compile a software entity manifestation. Self-contained means that no other file is needed to interpret or compile the code without errors. Minimal means that there is no subset of it defining the same software entity. In general the source code may need more than one file. 

The &quot;full source code&quot; of a software entity may be defined also as the set of source code manifestations of the software entity and of the software entity it depends on.

For instance the full source code of a Java class named Person is not just the Java file Person.java (the manifestation) but it is composed also by any other files needed to compile the Person.java file (e.g. if Person inherits from the class Animal also the source code of Animal is needed).
</provenanceManifestationCriteria>
        <rdfs:comment xml:lang="en">Any abstract programming entity (e.g. a Java class or a C function or a Corba Component) which is defined or implicitly assumed by a piece of source code, according to the semantics defined by a programming language specification or by another programming standard or convention. A SoftwareEntity is an abstract entity, in the sense that it has no location in space and/or time.

Note that while a SoftwareEntity is defined using a programming language, not all the SoftwareEntities are specified by the semantics of a program as defined by a programming language specification. Other software entities may be defined as higher level abstractions on top of the entities identified by the programming language specification. For instance, a certain component standard for a certain Oject Oriented programming language may define a Component as specific kind of graph of related programming language Objects, therefore introducing a kind of entity (i.e. Component) that was not specified by the original programming language specification but is obtained by abstracting on the entities specified by the original programming language specification.
 
SoftwareEntity is an abstract OWL class, i.e. identity criteria are defined by OWL subclasses.</rdfs:comment>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + SoftwareEntity type + name + namespace + incremental number (needed to distinguish SoftwareEntities with the same name and namespace)</mtop:canonicalURICriteria>
        <mtop:versionCriteria xml:lang="en">The version of the provenanceSourceCode.</mtop:versionCriteria>
        <mtop:identityCriteria xml:lang="en">the location of the provenance manifestation,
the version,
the name,
the namespace.</mtop:identityCriteria>
        <mtop:nameCriteria xml:lang="en">the name of the SoftwareEntity defined by its source code according to the programming language specification. </mtop:nameCriteria>
        <mtop:namespaceCriteria xml:lang="en">the namespace of the SoftwareEntity defined by its source code according to the programming language specification.</mtop:namespaceCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SoftwareForge -->

    <owl:Class rdf:about="&msw;SoftwareForge">
        <rdfs:label xml:lang="en">Software forge</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;NamedEntity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;name"/>
                <owl:minCardinality rdf:datatype="&xsd;nonNegativeInteger">1</owl:minCardinality>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;webSiteURL"/>
                <owl:minCardinality rdf:datatype="&xsd;nonNegativeInteger">1</owl:minCardinality>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A service (offered by a Web Site) to host software projects and to support collaborative software development. </rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SoftwareProject -->

    <owl:Class rdf:about="&msw;SoftwareProject">
        <rdfs:label xml:lang="en">Software project</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;NamedEntity"/>
        <rdfs:comment xml:lang="en">Any temporary or continuous endeavour undertaken to create or maintain a specific software source code collection. The project may be manifest on different web sites and the source code may be distributed on or replicated in different repositories.

This definition is intended to model what developers usually mean by the term &quot;Project&quot;. Some Project Management standard such as the PMP certification applies the  term &quot;Project&quot; only to temporarly endeavours.</rdfs:comment>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;Project&apos; + project name + incremental number (needed to distinguish projects with the same name)</mtop:canonicalURICriteria>
        <mtop:namespaceCriteria xml:lang="en">N.A.</mtop:namespaceCriteria>
        <mtop:versionCriteria xml:lang="en">N.A.</mtop:versionCriteria>
        <provenanceManifestationCriteria xml:lang="en">N.A. (A SoftwareProject is not a Work, i.e. a thing protected by Copyright, but it is an activity that produces some SoftwareWork. Therefore, strictly speaking, a SoftwareProject has no manifestation. We can speak instead of the manifestation of all resulting software and such a manifestation is roughly the set of all the SoftwareRepositories of the Project. In a more general sense there are things that are not a manifestation of the SoftwareProject but evidences of its existence such as a DOAP file describing the SoftwareProject).</provenanceManifestationCriteria>
        <mtop:nameCriteria xml:lang="en">The name resulting from any DOAP file of the Project. </mtop:nameCriteria>
        <mtop:identityCriteria xml:lang="en">the name of the SoftwareProject and the URI of any repository of the project (i.e. if two DOAP files refers to Project having the same name and have in common a value of the property &apos;repository&apos; then they are actually describing the same project).</mtop:identityCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SoftwareRelease -->

    <owl:Class rdf:about="&msw;SoftwareRelease">
        <rdfs:label xml:lang="en">Software release</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Software"/>
        <rdfs:subClassOf rdf:resource="&mtop;VersionedEntity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&mtop;previousVersion"/>
                <owl:allValuesFrom rdf:resource="&msw;SoftwareRelease"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A software published by a Project and considered sufficiently stable to be used by the final user. A SoftwareRelease is the entire software published by a the project at certain time, i.e. a portion of a SoftwareRelease is not a SoftwareRelease.
</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SourceCodeFile -->

    <owl:Class rdf:about="&msw;SourceCodeFile">
        <rdfs:label xml:lang="en">Source code</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;CodeFile"/>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://www.gnu.org/licenses/gpl.html</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">Any file that is the preferred form used by humans for making modifications to a software Program (it is a Source Code in the same sense of GPL v.3).</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#SourceFile -->

    <owl:Class rdf:about="&msw;SourceFile">
        <rdfs:label xml:lang="en">Source file</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SourceCodeFile"/>
        <rdfs:comment xml:lang="en">Any entity that may be represented by a UML2 Artifact with standard stereotype &lt;&lt;Source&gt;&gt; (i.e. A source file that can be compiled into an executable file.).</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Template -->

    <owl:Class rdf:about="&msw;Template">
        <rdfs:label xml:lang="en">Template</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ParameterizedEntity"/>
        <rdfs:comment xml:lang="en">A ParameterizedEntity that can be used to generate other SofwareEntities (TemplateBinding) that are not values.

Depending from the specific programming language different kind of SoftwareEntities may be generated by means of a Template.

Differently from a SoftwareClass, the generated entities, i.e. the  TemplateBindings, are not Values and cannot usually be created at runtime.

Any Template corresponds to an instance of a UML2  TemplateableElement, but not any UML2 TemplateableElement is a Template.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#TemplateBinding -->

    <owl:Class rdf:about="&msw;TemplateBinding">
        <rdfs:label xml:lang="en">Template binding</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ParameterizedEntityBinding"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;boundEntity"/>
                <owl:allValuesFrom rdf:resource="&msw;Template"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment xml:lang="en">A SoftwareEntity generated by means of a Template.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Type -->

    <owl:Class rdf:about="&msw;Type">
        <rdfs:label xml:lang="en">Type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">A SoftwareEntity that represents a set of (potential) entities (called instances). It can be represented by a UML2 Type.

Note that an instance of a Type is not necessarely a SoftwareEntity. For ex. a Behavior is a Type which instances are &quot;executions&quot; of the Behavior. 

Note that as not all SoftwareEntities are entities specififed by a programming language specification, not all the Types are programming language (value) Types, in the sense of a certain programming language specification, but they may be higher level Types, which members are entities obtained by abstraction of entities defined by a programmin language specification.

Note that not any UML2 type is a SoftwareEntity. </rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#TypedEntity -->

    <owl:Class rdf:about="&msw;TypedEntity">
        <rdfs:label xml:lang="en">Typed entity</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;SoftwareEntity"/>
        <rdfs:comment xml:lang="en">A SoftwareEntity having come explicit type (represented by the property valueType). It may be a Value or a placeholder for a Value, such as a Slot or a formal Parameter. In case it is a placeholder for a value, then (each) valueType is a constraint (in conjunction) on the range of values that the SoftwareEntity can represent. If such a placeholder has not valueType, then the range of possible values is language dependent. 

A TypedEntity having a single valueType may be represented by a UML2 TypedElement: &quot;A typed element is an element that has a type that serves as a constraint on the range of values the element can represent. Typed element is an abstract metaclass&quot;. </rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Value -->

    <owl:Class rdf:about="&msw;Value">
        <rdfs:label xml:lang="en">Value</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;TypedEntity"/>
        <rdfs:comment xml:lang="en">Any SoftwareEntity that may be assigned to or referred by a Variable or a Slot. It may be an object or a data value.

This may be represented by a UML2 &quot;ValueSpecification&quot; for a single value.</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ValueType -->

    <owl:Class rdf:about="&msw;ValueType">
        <rdfs:label xml:lang="en">A type which instances are Values.</rdfs:label>
        <rdfs:label xml:lang="en">Value type</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;Classifier"/>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#ValuedEntity -->

    <owl:Class rdf:about="&msw;ValuedEntity">
        <rdfs:subClassOf rdf:resource="&msw;TypedEntity"/>
        <rdfs:comment xml:lang="en">A SoftwareEntity representing another SoftwareEntity (called its value)</rdfs:comment>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#Variable -->

    <owl:Class rdf:about="&msw;Variable">
        <rdfs:label xml:lang="en">Variable</rdfs:label>
        <rdfs:subClassOf rdf:resource="&msw;ValuedEntity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&msw;assignedValue"/>
                <owl:allValuesFrom rdf:resource="&msw;Value"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <mtop:canonicalURICriteria xml:lang="en">MARKOS prefix + &apos;Variable&apos; + owning SoftwareEntity URI  + Variable name</mtop:canonicalURICriteria>
        <mtop:versionCriteria xml:lang="en">N.A.</mtop:versionCriteria>
        <rdfs:comment xml:lang="en">Named abstraction of a storage location. It&apos;s name is used to refer to corresponding values stored at that location or referred by that location content. Its name is used to refer to the corresponding stored value or values.

Depending from the modifiers, the programming language and the context, a Variable may correspond at runtime to a single storage location (e.g. a static local variable of a global proceedure) or to several storage locations (e.g. a local variable of a method, that corresponds to a different storage location at each method execution).

Depending from the programming language, the visibility of a Variable is private to the code that defined it or may be accessible also from outer code. 

Note: most programming languages call &quot;variable&quot; a specialization of this concept that is distinct from Attributes and Slots.
</rdfs:comment>
        <mtop:identityCriteria xml:lang="en">Owning SoftwareEntity,
attribute name.
</mtop:identityCriteria>
        <mtop:nameCriteria xml:lang="en">The name of the Variable as defined by the source code. </mtop:nameCriteria>
        <mtop:namespaceCriteria xml:lang="en">The owning SoftwarEntity (applicable only if the owning SoftwareEntity is a Namespace)</mtop:namespaceCriteria>
        <provenanceManifestationCriteria xml:lang="en">The same of its owning SoftwareEntity. </provenanceManifestationCriteria>
    </owl:Class>
    


    <!-- http://www.markosproject.eu/ontologies/software#VisibilityKind -->

    <owl:Class rdf:about="&msw;VisibilityKind">
        <rdfs:label xml:lang="en">Visibility kind</rdfs:label>
        <rdfs:subClassOf rdf:resource="&mtop;Entity"/>
        <rdfs:comment xml:lang="en">The same as UML2 VisibilityKind: determines where the memebr of a Namespace appears within different Namespaces and its accessibility.</rdfs:comment>
    </owl:Class>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Individuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.markosproject.eu/ontologies/software#ACTION_SCRIPT_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;ACTION_SCRIPT_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Action Script</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Action Script</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Action_Script</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#ADA_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;ADA_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Ada</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Ada</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Ada_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#APL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;APL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">APL</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">APL</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/APL_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#ASPECTJ_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;ASPECTJ_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Aspectj</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Aspectj</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://eclipse.org/aspectj/</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Aspectj</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#ASP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;ASP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">ASP</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">ASP</mtop:name>
        <rdfs:comment xml:lang="en">The language of ASP (Microsoft® Active Server Pages) files.</rdfs:comment>
        <rdfs:seeAlso xml:lang="en">http://en.wikipedia.org/wiki/Active_Server_Pages</rdfs:seeAlso>
        <rdfs:seeAlso xml:lang="en">http://msdn.microsoft.com/en-us/library/aa286483.aspx</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#ASSEMBLY_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;ASSEMBLY_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Assembly</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Assembly</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Assembly_language</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#AUTOCONF_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;AUTOCONF_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Autoconf</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Autoconf</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Autoconf</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#AUTOMAKE_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;AUTOMAKE_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Automake</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Automake</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Automake</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#BASH_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;BASH_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Bash</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Bash</mtop:name>
        <rdfs:comment rdf:datatype="&xsd;anyURI">The commnad language of the Unix shell written by Brian Fox.</rdfs:comment>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">https://www.gnu.org/software/bash/bash.html</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#CFML_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;CFML_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">ColdFusion Markup Language</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">ColdFusion</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/ColdFusion_Markup_Language</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://www.adobe.com/products/coldfusion-family.html</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#CLOJURE_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;CLOJURE_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Clojure</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Clojure</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Clojure</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#CMAKE_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;CMAKE_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">CMake</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">CMake</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Cmake</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#CPP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;CPP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">C++</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">C++</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/C%2B%2B_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#CSHARP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;CSHARP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">C#</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">C#</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#CSS_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;CSS_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">CSS</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">CSS</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/CSS</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#C_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;C_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">C</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">C</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/C_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#C_OR_CPP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;C_OR_CPP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">C/C++</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">C/C++</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/C%2B%2B_%28programming_language%29</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/C_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#D_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;D_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">D</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">D</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/D_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#EIFFEL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;EIFFEL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Eiffel</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Eiffel</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Eiffel_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#EMACS_LISP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;EMACS_LISP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Emacs Lisp</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Emacs Lisp</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/ECMA_Script</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#ERLANG_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;ERLANG_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Erlang</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Erlang</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Erlang_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#FORTRAN_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;FORTRAN_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Fortran</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Fortran</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Fortran_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#GO_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;GO_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Go</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Go</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Go_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#GROOVY_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;GROOVY_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Groovy</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Groovy</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Groovy_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#HASKEL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;HASKEL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Haskel</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Haskel</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Haskell_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#HTML_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;HTML_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">HTML</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">HTML</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/HTML</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#IN -->

    <owl:NamedIndividual rdf:about="&msw;IN">
        <rdf:type rdf:resource="&msw;ParameterDirectionKind"/>
        <rdfs:label xml:lang="en">in</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#IN_OUT -->

    <owl:NamedIndividual rdf:about="&msw;IN_OUT">
        <rdf:type rdf:resource="&msw;ParameterDirectionKind"/>
        <rdfs:label xml:lang="en">inout</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#JAVASCRIPT_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;JAVASCRIPT_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">JavaScript</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">JavaScript</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/JavaScript</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#JAVA_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;JAVA_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Java</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Java</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Java_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#JSP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;JSP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">JSP</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">JSP</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/JavaServer_Pages</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#LISP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;LISP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Lisp</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Lisp</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Lisp_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#LUA_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;LUA_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Lua</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Lua</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Lua_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#MAKE_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;MAKE_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Make</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Make</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Make_%28software%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#MATLAB_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;MATLAB_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">MATLAB</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">MATLAB</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/MATLAB</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#METAPOST_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;METAPOST_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">MetaPost</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">MetaPost</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/MetaPost</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#MODULA_2_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;MODULA_2_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Modula-2</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Modula-2</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Modula-2</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#MXML_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;MXML_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">MXML</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">MXML</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/MXML</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#OBJECTIVE_CAML_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;OBJECTIVE_CAML_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Objective Caml</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Objective Caml</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Objective_Caml</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#OBJECTIVE_C_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;OBJECTIVE_C_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Objective-C</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Objective-C</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Objective_c</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#OUT -->

    <owl:NamedIndividual rdf:about="&msw;OUT">
        <rdf:type rdf:resource="&msw;ParameterDirectionKind"/>
        <rdfs:label xml:lang="en">out</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PACKAGE_VISIBILITY -->

    <owl:NamedIndividual rdf:about="&msw;PACKAGE_VISIBILITY">
        <rdf:type rdf:resource="&msw;VisibilityKind"/>
        <rdfs:label xml:lang="en">package</rdfs:label>
        <rdfs:comment xml:lang="en">An entity with package VisibilityKind is visible to entities that are in the same package as its owning namespace. Only named entities that are not owned by packages can be marked as having package visibility. Any namespace member marked as having package visibility is visible to all entities within the nearest enclosing package (given that other owning entities have proper visibility). Outside the nearest enclosing package, a member marked as having package visibility is not visible. </rdfs:comment>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PASCAL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;PASCAL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Pascal</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Pascal</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Pascal_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PERL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;PERL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Perl</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Perl</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Perl</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PHP_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;PHP_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">PHP</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">PHP</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/PHP</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">https://php.net/</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PRIVATE_VISIBILITY -->

    <owl:NamedIndividual rdf:about="&msw;PRIVATE_VISIBILITY">
        <rdf:type rdf:resource="&msw;VisibilityKind"/>
        <rdfs:label xml:lang="en">private</rdfs:label>
        <rdfs:comment xml:lang="en">An entity with private VisibilityKind is only visible inside the namespace that owns it.</rdfs:comment>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PROLOG_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;PROLOG_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Prolog</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Prolog</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Prolog</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PROTECTED_VISIBILITY -->

    <owl:NamedIndividual rdf:about="&msw;PROTECTED_VISIBILITY">
        <rdf:type rdf:resource="&msw;VisibilityKind"/>
        <rdfs:label xml:lang="en">protected</rdfs:label>
        <rdfs:comment xml:lang="en">An entity with protected VisibilityKind is visible to elements that have a generalization relationship to the namespace that owns it.</rdfs:comment>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PUBLIC_VISIBILITY -->

    <owl:NamedIndividual rdf:about="&msw;PUBLIC_VISIBILITY">
        <rdf:type rdf:resource="&msw;VisibilityKind"/>
        <rdfs:label xml:lang="en">public</rdfs:label>
        <rdfs:comment xml:lang="en">An entity with public VisibilityKind is visible to all entities that can access the contents of the namespace that owns it.</rdfs:comment>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#PYTHON_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;PYTHON_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Phyton</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Phyton</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Python_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#REBOL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;REBOL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Rebol</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Rebol</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/REBOL</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://www.rebol.com/</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#RETURN -->

    <owl:NamedIndividual rdf:about="&msw;RETURN">
        <rdf:type rdf:resource="&msw;ParameterDirectionKind"/>
        <rdfs:label xml:lang="en">return</rdfs:label>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#RUBY_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;RUBY_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Ruby</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Ruby</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Ruby_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#R_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;R_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">R</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">R</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/R_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#SCALA_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;SCALA_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Scala</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Scala</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Scala_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#SCHEME_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;SCHEME_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Scheme</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Scheme</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Scheme_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#SHELL_SCRIPT_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;SHELL_SCRIPT_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Shell script</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Shell script</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Shell_script</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#SQL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;SQL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">SQL</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">SQL</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/SQL</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#TCL_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;TCL_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Tcl</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Tcl</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Tcl_%28programming_language%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#TEX_LATEX_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;TEX_LATEX_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">TeX/LaTeX</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">TeX/LaTeX</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/LaTeX</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/TeX</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#VIM_SCRIPT_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;VIM_SCRIPT_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Vim Script</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Vim Script</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">en.wikipedia.org/wiki/Vim_script</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#VISUAL_BASIC_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;VISUAL_BASIC_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Visual Basic</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Visual Basic</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Visual_Basic</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#XAML_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;XAML_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">XAML</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">XAML</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/XAML</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#XML_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;XML_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">XML</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">XML</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/XML</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#XML_SCHEMA_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;XML_SCHEMA_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">XML Schema</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">XML Schema</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/XML_Schema_%28W3C%29</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#XSL_TRANSFORMATION_LANGUAGE -->

    <owl:NamedIndividual rdf:about="&msw;XSL_TRANSFORMATION_LANGUAGE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">XSLT</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">XSLT</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/XSL_Transformations</rdfs:seeAlso>
    </owl:NamedIndividual>
    


    <!-- http://www.markosproject.eu/ontologies/software#YACC_LANGUACE -->

    <owl:NamedIndividual rdf:about="&msw;YACC_LANGUACE">
        <rdf:type rdf:resource="&msw;ProgrammingLanguage"/>
        <rdfs:label rdf:datatype="&xsd;string">Yacc</rdfs:label>
        <mtop:name rdf:datatype="&xsd;string">Yacc</mtop:name>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://dinosaur.compilertools.net/yacc/</rdfs:seeAlso>
        <rdfs:seeAlso rdf:datatype="&xsd;anyURI">http://en.wikipedia.org/wiki/Yacc</rdfs:seeAlso>
        <rdfs:comment xml:lang="en">The language used to define grammars taken as input from the yacc parser generator.</rdfs:comment>
    </owl:NamedIndividual>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotations
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <rdf:Description rdf:about="&mlic;argumentation">
        <rdfs:label xml:lang="en">Argumentation</rdfs:label>
    </rdf:Description>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // General axioms
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <rdf:Description>
        <rdf:type rdf:resource="&owl;AllDifferent"/>
        <owl:distinctMembers rdf:parseType="Collection">
            <rdf:Description rdf:about="&msw;ACTION_SCRIPT_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;ADA_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;APL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;ASPECTJ_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;ASP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;ASSEMBLY_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;AUTOCONF_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;AUTOMAKE_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;BASH_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;CFML_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;CLOJURE_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;CMAKE_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;CPP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;CSHARP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;CSS_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;C_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;C_OR_CPP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;D_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;EIFFEL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;EMACS_LISP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;ERLANG_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;FORTRAN_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;GO_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;GROOVY_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;HASKEL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;HTML_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;IN"/>
            <rdf:Description rdf:about="&msw;IN_OUT"/>
            <rdf:Description rdf:about="&msw;JAVASCRIPT_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;JAVA_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;JSP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;LISP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;LUA_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;MAKE_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;MATLAB_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;METAPOST_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;MODULA_2_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;MXML_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;OBJECTIVE_CAML_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;OBJECTIVE_C_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;OUT"/>
            <rdf:Description rdf:about="&msw;PACKAGE_VISIBILITY"/>
            <rdf:Description rdf:about="&msw;PASCAL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;PERL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;PHP_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;PRIVATE_VISIBILITY"/>
            <rdf:Description rdf:about="&msw;PROLOG_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;PROTECTED_VISIBILITY"/>
            <rdf:Description rdf:about="&msw;PUBLIC_VISIBILITY"/>
            <rdf:Description rdf:about="&msw;PYTHON_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;REBOL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;RETURN"/>
            <rdf:Description rdf:about="&msw;RUBY_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;R_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;SCALA_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;SCHEME_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;SHELL_SCRIPT_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;SQL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;TCL_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;TEX_LATEX_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;VIM_SCRIPT_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;VISUAL_BASIC_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;XAML_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;XML_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;XML_SCHEMA_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;XSL_TRANSFORMATION_LANGUAGE"/>
            <rdf:Description rdf:about="&msw;YACC_LANGUACE"/>
        </owl:distinctMembers>
    </rdf:Description>
</rdf:RDF>



<!-- Generated by the OWL API (version 3.4.2) http://owlapi.sourceforge.net -->

